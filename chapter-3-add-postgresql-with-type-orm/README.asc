//{{{ ** ASCIIDOC HEADER
:description:   nestjs official course | chapter-3
:url-repo:      https://github.com/agungTuanany/nestjs_course_official
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Thu Mar 25 12:36:52 AM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
//}}}

[[_chapter_3_add_postgresql_with_typeorm]]
= Chapter-3 Add PostgreSQL With TypeORM
:figure-caption!:
:source-highlighter: highlight.js

//{{{== Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h,~"]
|====
| 1.    | xref:_creating_a_basic_controller[Creating a Basic Controller]
| 2.    | xref:_prerequisite_instal_docker[Prerequisite: Instal Docker]
| 3.    | xref:_running_postgresql[Running PostgreSQL]
| 4.    | xref:_introduction_the_typeorm_module[Introduction The TypeORM Module]
| 5.    | xref:_creating_a_typeorm_entity[Creating a TypeORM Entity]
|====
//}}}

//{{{ 1 == Before We Get Started
== Before We Get Started
:fn-link_chapter_2: link:../chapter-2-creating-rest-api-application/README.asc
:fn-link_chapter_9: link:../chapter-9-add-mongodb-with-mongoose/README.asc
:fn-link_chapter_9_: footnote:[WIP | Work In Progress]

[#img-chapter]
[link=./images/chapter-3-1.png]
.Before we get started
image::./images/chapter-3-1.png[align="center"]

This chapter is a continuation of {fn-link_chapter_2}[chapter-2: creating a rest
API application] which is part of the *standard path* of this course. There's
also a bonus NoSQL MongoDB chapter{fn-link_chapter_9_} that begins right where
Chapter Two left off as well.

[#img-chapter]
[link=./images/chapter-3-2.png]
.Create backup git - branch
image::./images/chapter-3-2.png[align="center"]

If you want to code along through both of these database chapters. Make sure
you save your progress from this last chapter, into separate branch. This way
you can use it later for the MongoDB bonus chapter. If you using Git, make sure
to create a new Branch to store your current progress, and then head back to
your *master* - branch to continue along with this PostgreSQL and TypeORM
- chapter, as well as the rest of the course.

By fracturing these SQL and NoSQL section, you can easily choose and watch
whichever section you need for your project, or code along through both.

**⬆xref:_table_of_contents[back to top]**
//}}}

//{{{ 2 == Prerequisite: Instal Docker
[[_prerequisite_instal_docker]]
== Prerequisite: Instal Docker
:fn-docker_compose_install: footnote:[https://docs.docker.com/compose/install/]
:fn-docker_compose_doc: footnote:[https://docs.docker.com/compose/]

[#img-chapter]
[link=./images/chapter-3-3.png]
.Prerequisite
image::./images/chapter-3-3.png[align="center"]

Docker is a platform for developers to: Build, Run, and Share applications that
are within containers. The use of containers to deploy applications is called
*_containerization_*. Containerization has become increasingly popular over
years due to many benefits they bring to the development process.

[#img-chapter]
[link=./images/chapter-3-4.png]
.Benefit Containerization with Docker
image::./images/chapter-3-4.png[align="center"]

Let's go over a few key benefits. Container are:

- *Flexible*,
- *Lightweight*,
- *Portable*, meaning you can build them locally, deploy to the cloud and run
  anywhere.
- *Loosely - Coupled*, this means that containers are highly self-sufficient and
  encapsulated. Allowing them to be replaced or upgraded, without disrupting any
  other containers.

There are many other great benefits to containerization and Docker, but
hopefully you get the idea so far.

*Fundamentally* a container is, just a running process with some added
encapsulation features applied to it. This helps keep the container isolated
from the host and other container.

In this course, we'll be using docker to set up a database locally on your
machine. If you do not have Docker installed already, go ahead and pause in
second and check out installation instructions on the official
https://docker.com[docker - website].

In addition to Docker, we'll be utilizing *_Docker Compose_*. *Docker - Compose*
is, a tool for defining and running *_multiple container_* Docker applications.
With *Docker - Compose*, you can use a YAML - file to configure our
*_application - services_*. If you're not familiar with YAML, don't worry, we'll
briefly cover how we'll be setting up the file, but it's nothing too
intimidating.

Once we have all this things set up, with just single command, we can create and
start all the services from our configuration on any machine. Docker is going to
make working with our application _that much simpler_ in the future, not just
for us, but also for other developers, different machines, and can even help us
quickly set up our application in the cloud.

For Mac and Windows users, *Docker - Compose* is includes out of the box with
Docker. But if you're on Linux, there are a few additional steps you'll need to
do in order to get *Docker - Compose* installed{fn-docker_compose_install}.

Make sure to check the *Docker - Compose _documentation_*{fn-docker_compose_doc}
for more information.

**⬆xref:_table_of_contents[back to top]**
//}}}

//{{{ 3 == Running PostgreSQL
[[_running_postgresql]]
== Running PostgreSQL
:fn-psql_feature_filled: footnote:[automatically generate database and allow to work and fill multiple database tables]

[#img-chapter]
[link=./images/chapter-3-5.png]
.Running PostgreSQL
image::./images/chapter-3-5.png[align="center"]

Now, that we have Docker installed, just make sure that's it is running on your
machine and let's see it in action.

Previously in our application, we were using a _Mock data - resource_ in our
`CoffeesServices`. Let's take it up a notch and use a real database so we can
really take our application, to the next level.

We're going to be using PostgreSQL. Because not only is it one of the *_most
performant_*, feature *_filled database management_*{fn-psql_feature_filled}
system out there. But it's also free!.

In the past, we may have gone to the Postgres website, installed the database
locally on our machine. But let's take advantage of Docker, to handle all of
this for us. We're going to be using the _Docker - Compose_ tool, and it's YAML
- configuration to set everything up that our application needs.

To get started, let's create a `docker-compose.yml` file, in the project's root
directory. Next let's define a *_database - container_* in YAML - format. YAML
is an interesting configuration file in that *_spacing - indentation_* and
*_dashes_* all *matter*, and do something. If you want to learn more about YAML,
please check out https://yaml.org/start.html[yaml]. There's a lot going o here,
if you look down below the course - video, you'll be able to copy what you need
for this file.

[source, yaml]
----
version: "3"

services:
  db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: pass123
----

The most important piece here are, that we have a `*db:*` - service that is
using the Docker `*image:*` of `postgres`.  A Docker - `"image:"` is a *multilayered
- file* that will execute code within a *_docker - container_*, and in this case
it will be creating a PostgreSQL - database.

Next up, we have `*ports:*`. We can see that we'll be using the default ports
for PostgreSQL of `5432` but notice the `*":"*` (colon)m and then the same port,
`5432`, again. This indicates to Docker that internally within the container, it
should have the database set up on Port `5432`, but also have it *accessible
_outside_* of Docker, on the *same port* as well.

This lets us be able to access this database that's inside of the Docker
- container, outside of the container, and on our current machine!.

Lastly, we're *setting up a password* for Postgres, which we've made `pass123`.

I know a lot of this might seem like a lot, but with all that in place. We can
use the Docker - Compose CLI to run the database service effortlessly, with just
one single command.

Let's open new terminal, and let's enter `docker-compose up -d` to bring our
Docker - Container "up".

[source, shell]
----
$ docker-compose up -d
----


The `"-d"` flag means that we want to run our containers in "*detached*' mode.
Meaning that they are going to be running in the "background".

We only have _one service_ listed in our `docker-compose.yml` file, but for
future reference; if you had *_other services_* here and wanted to run
a *SPECIFIC - one*. You can pass the "name" of the service you want to run by
entering the *name* of it.

[source, shell]
----
$ docker-compose up db -d
----

NOTE: Just remember, that when you pass in *nothing* Docker - Compose will spawn
all the services defined.

**⬆xref:_table_of_contents[back to top]**
//}}}

//{{{ == 4 Introduction The TypeORM Module
[_introduction_the_typeorm_module]]
== Introduction The TypeORM Module
:fn-orm: footnote:[Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a "virtual object database" that can be used from within the programming language.  http://en.wikipedia.org/wiki/Object-relational_mapping]
:fn-typeorm: footnote:[https://github.com/typeorm/typeorm]

[#img-chapter]
[link=./images/chapter-3-6.png]
.Introduction The TypeORM Module
image::./images/chapter-3-6.png[align="center"]

Nest itself is database agnostic, allowing you to easily integrate with any SQL
or NoSQL database of your choice. There are a lot of different ways you can
integrate Nest with databases, and they all depend on your personal preference
or project's needs.

For this chapter, we'll be using the popular, mature and fully featured Object
Relational Mapper or ORM{fn-orm} known as TypeORM{fn-typeorm}. TypeORM will let
us interact with *_entities_* in our database in a *Type safe* and incredibly
*simple* manner, letting us get things done faster than ever.

In this course, we'll be setting up TypeORM with Postgres database that we have
up, and running in our Docker - Container. But TypeORM provides support for many
other relational database such as: MySQL, Microsof - SQL Server, SQLite and even
NoSQL databases like MongoDB. So use whatever suits your projects best.

To get strated with TypeORM, let's get the necessary dependencies installed for
our application. We are continuing ahead as we already have these installed. But
if you're following along, just pause in a second, and come back when it's
finished.

NOTE: that the procedures we walk through in this chapter will be the same for
pretty much any database supported by TypeORM.

[source, shell]
----
$ npm i --save @nestjs/typeorm typeorm pg
----

All right, we can see we've installed a `*@nestjs/typeorm*` package, `*typeorm*`
it self, and also `*pg*`, which we need since we'll be using Postgres in our
application.

Once the installation process is complete, let's get TypeORM setup in our
`ilovcoffee` - application. Let's open up our `app.module.ts` file and head over
to the `imports:[]` Array.

[source, typescript]
----
// app.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

import { AppController } from './app.controller';
import { AppService } from './app.service';
import { CoffeesModule } from './coffees/coffees.module';

@Module({
    imports: [
    CoffeesModule,
    TypeOrmModule.forRoot({
        type: 'postgres',
        host: 'localhost',
        port: 5432,
        username: 'postgres',
        password: 'pass123',
        database: 'postgres',
        autoLoadEntities: true,
        synchronize: true
    })
    ],
    controllers: [AppController],
    providers: [AppService],
})
export class AppModule {}
----

NestJs comes with a module that helps make the TypeORM integration extremely
simple. To get started with this module, let's import `TypeOrmModule from
`@nestjs/typeorm` and add it into our `imports:[]` Array here.

We need to initialize this module, so let's call the `forRoot()` method on the
`TypeOrmModule` which lets us configure the connection to TypeORM as well as
a few additional tools available to integrate it with Nest.

Let's start out with,
- `*"type:"*` which we've set to `postgres` since we know we're using
  PostgreSQL.

- `*"host:"*` will be `localhost` since we're developing locally.

- `*"port:"*` is `5432` which is what we set in our
`docker-compose.yml` - file.

- `*"username:"*` is a username for accessing our database. We never set one in
  our Docker - Compose file. We're going to use `"postgress"`, which is the
  *_default_* for PostgreSQL databases.

- `*"password:"*` we've set to `pass123`, just like w did in our Docker - Compose
file again.

- `*"database:"*` here, we'll list the name of our database that our application
  will be using. Let's call it `postgress`.

- `*"autoLoadEntities:"*`, let's set this to `true`. This helps load modules
  automatically instead of specifying the entities Array. We'll dive deeper into
  this later in an entity section.

- `*"synchronize:"*`, we set to `true`. `synchronize` ensures that our *_TypeORM
  entities_* will be *sync* with the database every time we run our application.
  This great for development,

CAUTION: but a very important tip!, Make sure you DISABLED `*"synchronize:"*`
when you're in *Production*!.

Now, that we have TypeORM configured, let's open up our terminal, and start our
application to make sure everything's working.

[source, shell]
----
$: npm run start:dev
[Nest] 618027  -  [NestFactory] Starting Nest application...
[Nest] 618027  -  [InstanceLoader] TypeOrmModule dependencies initialized +89ms         //<<<
[Nest] 618027  -  [InstanceLoader] AppModule dependencies initialized +1ms
[Nest] 618027  -  [InstanceLoader] CoffeesModule dependencies initialized +0ms
[Nest] 618027  -  [InstanceLoader] TypeOrmCoreModule dependencies initialized +32ms     //<<<
[Nest] 618027  -  [RoutesResolver] AppController {}: +6ms
[Nest] 618027  -  [RouterExplorer] Mapped {, GET} route +3ms
[Nest] 618027  -  [RoutesResolver] CoffeesController {/coffees}: +0ms
[Nest] 618027  -  [RouterExplorer] Mapped {/coffees, GET} route +1ms
[Nest] 618027  -  [RouterExplorer] Mapped {/coffees/:id, GET} route +2ms
[Nest] 618027  -  [RouterExplorer] Mapped {/coffees, POST} route +2ms
[Nest] 618027  -  [RouterExplorer] Mapped {/coffees/:id, PATCH} route +2ms
[Nest] 618027  -  [RouterExplorer] Mapped {/coffees/:id, DELETE} route +1ms
[Nest] 618027  -  [NestApplication] Nest application successfully started +10ms
----

We fire up the application in development - mode, again with `npm run
start:dev`. If we look carefully, we should see `TypeOrmModule` dependencies
initialized. Meaning we have successfully established a connection to our Docker
- Postgres database.

If you having any issues setting up TypeORM, make sure that Docker is running
with `docker-compose up -d`. Also make sure `*"password:"*` inside your
`TypeOrmModule.forRoot()` matches what you have in your Docker - Compose file.

**⬆xref:_table_of_contents[back to top]**
//}}}

//{{{ 5 == Creating a TypeORM Entity
[[_creating_a_typeorm_entity]]
== Creating a TypeORM Entity

An *"Entity"* represent a *relationship* between a TypeScript class and
a database table. Well, in the case of our Nest applications our *"entities"*
will be *classes - decorator* with the `@Entity()` decorator.

In the previous lesson on TypeORM, we set `*"synchronize:"*` to `true` in our
`TypeOrmModule.forRoot()` configuration method. This synchronize
- configuration, let's TypeORM automatically generate SQL - table from all
classes with the `@Entity()` decorator, and the metadata they contain.

This automatic synchronization saves us a lot of manual - coding that we'd have
to do otherwise while actively developing our applications. REMEMBER!!, this is
designed for *development only*. Make sure to ALWAYS!! *disable* this feature in
*production*!.

So, let's get started and upadte our existing "mock" - Coffee-entity and set it
up with TypeORM. Let's start by opening our Coffee-entity, and adding this new
`@Entity()` decorator on top. Making sure to import it form `typeorm`.

[source, typescript]
----
// coffee.entity.ts
import { Entity } from 'typeorm';

@Entity()   // sql table === "coffee"
export class Coffee {
    id: number;
    name: string;
    brand: string;
    flavors: string[];
}
----

As we mention a moment ago, each *Entity - class* represent a *SQL - table*. By
default, TypeORM will *name the SQL - table* based on our *class - name* in
*lowercase*.

So in this example, the SQL - table that will be generated will be "coffee", in
lowercase.

----
@Entity('coffees')   // sql table === "coffees"
----

If you want to use a *different table - name* for your Entity, you can specify
inside of the `@Entity()` decorator. Passing the Strig "coffees" into the
decorator will generate a 'coffees" - table instead.

Let's remove the String from `@Entity()` decorator, and just use our class
- name `coffee` as the SQL table for now.

=== Define TypeORM -  Table Column

Now that we have all this in place, we can start defining the *columns* in our
table.

[source, typescript]
----
// coffee.entity.ts
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()   // sql table === "coffee"
export class Coffee {
    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column()
    brand: string;

    @Column('json', { nullable: true})
    flavors: string[];
}
----

Every properties in our class that is annotated with `*@Column()*` decorator,
will be mapped to a *table - column*. Let's build up our *Coffee - Entity* to
see all this in action.

First, almost every table needs a *primary key*, right? Let's use a new
decorator called `@PrimaryGeneratedColumn()` and decorate this `*"id"*` property
with it. This decorator will not define `*"id"*`  here as the *primary
- column*, but also *auto - increment* the value for us.

Next, let's add the `@Column()` decorator to all the rest of our properties
here: `*"name:"*`, `*"brand:"*`, and `*"flavors:"*`.

For `*"flavors:"*` we need to do something a little bit different, since this is
an Array, and we want to make our *flavors optional* as well. Inside
our`@Column()` decorator, let's pass in *two arguments*. One that label this
column as type *"json"*; and the other an Object with `*"nullable: true"*`

With this in place, TypeORM now knows that `*"flavors:"*` should store Arrays'
as JSON; and to make this *column - optional* in our table.

We set this column to JSON here, but this is *just temporary*. Soon we'll show
relationship in a coming chapter.

Note, that each column here is is *"not"* - *"nullable"*, meaning *"REQUIRED by
default"*. So in our Coffee - entity, all the columns besides `*"flavors"*` are
required.

=== Register Entity in Application

Now that we have the basics of our entity set up in place, let's register Coffee
- entity in our application.

Now, that our application is a but modularized, and we're dealing with this
entity inside of the `CoffesModule`. We need to make TypeORM aware of the entity
if THIS child - module itself.

Let's open up our `CoffeesModule`,

[source, typescript]
----
//coffees.service.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { CoffeesController } from './coffees.controller';
import { CoffeesService } from './coffees.service';

@Module({
    imports: [TypeOrmModule.forFeature([Coffee])],
    controllers:[CoffeesController],
    providers: [CoffeesService],
})
export class CoffeesModule {}
----

First, create an `*"imports:"*` Array inside of the `@Module()` decorator. In
this `*"imports:"*` Array let's add `TypeOrmModule.forFeature()`, passing an
Array with our *Coffee - Entity* inside of it.

The use of `forFeature()` here, register TypeORM in this *child - modules*.
Remember we use `forRoot()`, in our main `AppModule` before, but we only do that
once. Every other module will use `forFeature()` when *registering entities*.

Inside `forFeature()` here, we passed in an Array of Entities, but in our case
we only have one, our *Coffee - Entity*.

If you look at the Coffee - table now in database UI of your choice, it should
look something like this,

[#img-chapter]
[link=./images/chapter-3-7.png]
.Coffee - table
image::./images/chapter-3-7.png[align="center"]

Everything setup just as we created it.

Or, you can  run docker container in a new terminal,

[source, bash]
----
$ docker ps
CONTAINER ID   IMAGE      COMMAND                  CREATED       STATUS       PORTS                    NAMES
0d055840ed23   postgres   "docker-entrypoint.s…"   3 hours ago   Up 3 hours   0.0.0.0:5432->5432/tcp   iluvcoffe_db_1

// docker exec -it [CONTAINER_ID OR NAMES] bash
$ docker exec -it 0d055840ed23 bash
----

Once you have successfully login into *docker - machine*, try to login into
*Postgres - database* with these command, and enter the same `*"password"*` as
you type at `TypeOrmModule.forRoot()` in `AppModule`. In this case we use
`*pass123*`

[source, shell]
----
root@0d055840ed23:/# psql -U postgres -W postgres
Password:
----

Once you've login into *Postgres - database*, we can check the tables that
TypeORM just created automatically under the hood.

[source, shell]
----
postgres-# \d
              List of relations
 Schema |     Name      |   Type   |  Owner
--------+---------------+----------+----------
 public | coffee        | table    | postgres
 public | coffee_id_seq | sequence | postgres
(2 rows)


postgres-# \d coffee
                                  Table "public.coffee"
 Column  |       Type        | Collation | Nullable |              Default
---------+-------------------+-----------+----------+------------------------------------
 id      | integer           |           | not null | nextval('coffee_id_seq'::regclass)
 name    | character varying |           | not null |
 brand   | character varying |           | not null |
 flavors | json              |           |          |
Indexes:
    "PK_4d27239ee0b99a491ad806aec46" PRIMARY KEY, btree (id)
----

**⬆xref:_table_of_contents[back to top]**
//}}}

//**⬆xref:_table_of_contents[back to top]**
