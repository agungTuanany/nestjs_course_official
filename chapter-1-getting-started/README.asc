//{{{ ** ASCIIDOC HEADER
:description:   SRS 7Express
:url-repo:      https://my-git-repo.com
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Sat Mar 20 07:46:12 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
//}}}

= Chapter-1 Getting Started with nestJS
:figure-caption!:

[[_table_of_contents]]
== Table of Contents

[cols="10h,~"]
|====
| 1.    | xref:_nestjs_introduction[nestJS Introduction]
| 2.    | xref:_what_is_inside_nestjs_application[What Is Inside NestJS Application]
|====

//**⬆xref:_use_case_number_specification[back to top]**

//{{{ == NestJS Introduction
[[_nestjs_introduction]]
== NestJS Introduction

[#img-chapter]
[link=./images/chapter-1-0.png]
.Official NestJS +
image::./images/chapter-1-0.png[align="center"]

In this course we are going to be covering the NestJS framework from top to
bottom, getting you up to speed and creating Enterprise-grade NodeJS applications
with the help of NestJS, in no-time.

Almost everything we are going to be looking at, learning, and building in this
course will be incremental.

By the end, you will have somewhat *real world application*, and be ready to
fully take advantage of the NestJS framework; even using it as a great jumping
off point for your future application.

[#img-chapter]
[link=./images/chapter-1-1.png]
.NestJS Introduction +
image::./images/chapter-1-1.png[align="center"]

Before we dive into exactly what what NestJS is, let's take a step back and look
at the NodeJS ecosystem as a _whole_. NodeJS makes no assumption and includes
almost nothing by default, for it's purposely meant to be very *bare bones*.

NodeJS by design has a minimalistic setup, and developers are in charge of
setting up *_everything_* they want to use for their application.

With this situation, using NodeJS is, have applies to everything form how you
handle _routing_, _API calls_, _setting up WebSockets_, to even
rudimentary things like, _code organization_, _file structure_, and
_naming conventions_.

As NodeJS has been around for may years, and there are plenty of framework that
have helped make some of these requirements simpler, most notably ExpressJS; But
they all *still* require A LOT of configuration and effort on the part of the
developer.

This *ultimately flexibility* can be a bit of a double edged sword. Creating
potential problems as applications or teams grow very large. NestJS tries to
tackle some of these problems by creating an *_abstraction_* or overall
framework around NodeJS; by letting you *_focus on the application problems_* at
hand instead of the tiny implementation details such as, _setting up TypeScript_,
_API routing_, _Error handling_, _middleware setup_, and so on so much more.

NestJS provides an out of the box application architecture that allows developers
and to create _highly testable_, _scalable_, _loosely coupled_, and _easily
maintainable application_.

[#img-chapter]
[link=./images/chapter-1-2.png]
.NestJS pros +
image::./images/chapter-1-2.png[align="center"]

But, how is this achieved?

Think of _NestJS as a *layer* above NodeJS itself_, *abstracting away* _difficult
tasks_, _tools_, and _boilerplate code_, while also *adding a full fledged
toolkit* for your application development.

Using NestJS does *not lock you into yet another framework*,

[#gif-chapter]
[link=./images/gif/chapter-1-1.png]
.How NestJS works? +
image::./images/gif/chapter-1-1.png[align="center"]

// XXX TODO: move footnote onto single file XXX
:fn-readily: footnote:[utilize easily]
:fn-prominent: footnote:[substantial]
:fn-platform_agnostic: footnote:[Platform agnostic is a concept that refers to the design attributes and philosophies of software products. A platform agnostic product runs equally well across more than one platform.]
:fn-dependency_injection: https://docs.nestjs.com/providers#dependency-injection

But instead leverages readily{fn-readily} available and
prominent{fn-prominent} options and modules in the community, like those
available in ExpressJS applications.

One interesting to note is, that NestJS can even be swapped to use "Fastify"
under the hood instead of ExpressJS (which is used by default).

Just keep in mind, that you may need to use different Fastify compliant library
in your application if you do this.

The flexibility that NestJS provides here, gives us the ability to create modules
that are platform-agnostic{fn-platform_agnostic} not only to HTTP frameworks such
as ExpressJS or Fastify but even agnostic across different types of applications.

[#img-chapter]
[link=./images/chapter-1-4.png]
.NestJS props +
image::./images/chapter-1-4.png[align="center"]

With NestJS you can build *REST-API's*, *MVC applications*, *micro services*, *GraphQL
applications*, *WebSockets*, and even *CLI's and Cron jobs*.

With the help of the NestJS {fn-dependency_injection}[dependency injection
system]; We have the ability to swap out the underlying mechanisms effortlessly.

In this course, we are going to be focusing on _creating a *real world example
REST-API application_*, utilizing and learning about all the great NestJS features,
along the way.

By the time we finish, you will be ready to tackle any challenge with NestJS.

**⬆xref:_table_of_contents[back to top]**
//}}}

//{{{ == What Inside NestJS Application
[[_what_is_inside_nestjs_application]]
== What Is Inside NestJS Application

With Nest applications maintaining a separation of concerns, it has never been
easier. This is because inside of Nest applications everything has a defined
structure in place, letting you work on the task at hand rather than worrying
about organization or convention.

[source, bash]
```
.
├── src
│   ├── app.controller.spec.ts
│   ├── app.controller.ts
│   ├── app.module.ts
│   ├── app.service.ts
│   └── main.ts
├── test
│   ├── app.e2e-spec.ts
│   └── jest-e2e.json
├── .eslintrc.js
├── .gitignore
├── nest-cli.json
├── node_modules
├── package.json
├── package-lock.json
├── .prettierrc
├── README.md
├── tsconfig.build.json
└── tsconfig.json

```

If we look inside the root directory of our project, will see a lot of files that
you may be familiar with already, such as `package.json`, `tsconfig.json` files;
`.gitignore` the eslint configuration `.eslintrc`.

But most notably here. We have a Nest specific file called, `nest-cli.json` which
will dive into later in this course. But the core of our Nest application actually
lives in the `src` directory, let's open it up and see what we have inside.

Firstly our entire Nest application starts with the `main.ts` file.

[source, javascript]
```
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
    const app = await NestFactory.create(AppModule);
    await app.listen(3000);
}
bootstrap();
```


In this `main.ts` file we can see that our Nest application is being created via
`NestFactory.create()` taking in an `AppModule`. With this application reference
we can now listen and `bootstrap()` our application to Port `3000`.

Think of this file like the main starting file for your typical NodeJS
application, or a lot of *root level* work needs to be done.

But what was this `AppModule` we just passed in? Well `AppModule` the root module
for our application containing everything that our app needs to run; this route
module itself can contain other small modules that are all different features
or chunks of themselves.  But when brought together here in from
`./app.module.ts` we get our complete application.

Don't worry if this doesn't totally make sense yet. We'll be diving into modules
more later on.

Let's open up this `app.module.ts` file and take a look inside.

[source, javascript]
```
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
    imports: [],
    controllers: [AppController],
    providers: [AppService],
})
export class AppModule {}
```

As you can see we have a regular class here, but with NestJS `@Module()`
typescript decorator on top.

If you're not familiar with decorators, they are simply *_functions that apply
logic_*. Decorators can be applied to *classes* like we're seeing here, but also to
*methods*, *properties* and even *parameters*.

NestJS *_utilizes decorators extensively_*. You'll be seeing them throughout our
code in this course. We can see that within this `@Module({})` decorator here. We
have encapsulated everything that is important to this *_modules context_*.  We
even have a few *_controllers_* and *_providers_* included with our starter CLI
application.

Let's take a look at the `App.controller.ts` and see what it has inside.

[source, javascript]
```
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
    constructor(private readonly appService: AppService) {}

    @Get()
    getHello(): string {
        return this.appService.getHello();
    }
}
```

Similar to the `app.module.ts` We just saw a NestJS controller is also just
a class.  But with a different `@Controller()` decorator on top, we'll be diving
deeper into controllers shortly, but for right now, know that *controllers* are
*_where specific requests are handled by your application in this controller_*.

In this _controller_ We can see that it utilizes the `appService:` *provider* to
help *_separate out business logic from the controller itself_*; we'll also be
diving into how _providers like this work_ and _dependency ejection_ in future
lessons


As we said _controllers_ handle specific request to our application. We can see
that our starter application includes one `GET` request that is set up for us.

This get request utilizes the `appService` We just saw, calling the `getHello()`
method on it.

If we dive into the `app.service.ts` _provider_ here and go to definition,

[source, javascript]
```
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
    getHello(): string {
        return 'Hello World!';
    }
}
```
:fn-extent: footnote:[scope, stage, depth]

We can see that it's simply returning the string of `Hello World!` We saw when we
ran our application moments ago; And that's the extent {fn-extent} of our project
so far right now, we have a very simple application with just one module.  But as
we grow this application, we'll see how Nest modular project architecture
encourages us to *group features* such as *_routes_*, *_services_* into their own
modules.

In the end, this helps us maintain a higher level of _reuse-ability_,
_testability_ and even helps reduce disorganized code in our applications. Some of
this doesn't make sense yet, don't worry, It'll all come together as we build out
the application throughout this course.

Now that we've seen some of the fundamental building blocks of Nest. Let's beef
up our sample application to really see Nest in action.

**⬆xref:_table_of_contents[back to top]**
//}}}
