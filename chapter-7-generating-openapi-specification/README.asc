//{{{ ** ASCIIDOC HEADER
:description:   nestjs official course | chapter-4
:url-repo:      https://github.com/agungTuanany/nestjs_course_official
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Thu Apr  8 03:17:33 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
:prewrap!:
//}}}

[[_chapter_7_generating_openapi_specification]]
= Chapter-7 Generating OpenAPI Specification
:figure-caption!:
:source-highlighter: highlight.js

//{{{== Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h,~"]
|====
| 1.    | xref:_introducing_the_swagger_module[Introducing the Swagger Module]
|====
//}}}

//{{{ 1 == Introducing the Swagger Module
[[_introducing_the_swagger_module]]
== Introducing the Swagger Module

//{{{ image::./images/chapter-7-1.png
[#img-chapter]
[link=./images/chapter-7-1.png]
.Introducing the Swagger Module
image::./images/chapter-7-1.png[align="center"]
//}}}

Documenting how our application works and showing what our API *expects* and
*returns*, is a vital part of most application documentations. This is
especially true, if you are exposing an external Software Developer Kit (or
SDK).

One great tool to automate this entire process is *Swagger*.

In these next lesson. We'll be looking at how we can integrate and automatically
generate "OpenAPI - documentation" for our NestJS applications.

We'll be taking advantage of all the latest tools and Nest "plugin" to help
automate and simplify every aspect of the process. Let's jump right in.

//{{{ image::./images/chapter-7-2.png
[#img-chapter]
[link=./images/chapter-7-2.png]
.Introducing the Swagger Module -2
image::./images/chapter-7-2.png[align="center"]
//}}}

One of the best ways to document our application is to use the "OpenAPI
- Specification".  The "OpenAPI - Specification" is a language agnostic
definition format used to describe a "RESTful APIs".

//{{{ image::./images/chapter-7-3.png
[#img-chapter]
[link=./images/chapter-7-3.png]
.Introducing the Swagger Module -3
image::./images/chapter-7-3.png[align="center"]
//}}}

An "OpenAPI - document" allows us to describe our entire API including:

- Available *operations* or endpoints.
- *Operation parameter*: input and output for each operation.
- *Authentication* methods.
- *Contact information*, license, terms of use, and other information and much
  more.

Nest provides a dedicated Module which allows us to generate such an "OpenAPI
- document" simply by "*leveraging decorators*".

To get this module installed in our application. Let's first make sure we have
the necessary dependencies installed.

We'll be installing `"@nestjs/swagger"`, `"swagger-ui-express"`, since our
application is using the default platform ExpressJS.  Just know that if you've
switched your "Nest - application" to use "Fastify" install `"fastify-swagger"`
instead.

//{{{ $ npm i --save @nestjs/swagger swagger-ui-express
[source, shell]
----
$ npm i --save @nestjs/swagger swagger-ui-express
----
//}}}

We'll continue ahead as we already have these packages installed, but if you're
following along just pause in a second and come back when it's finished.

Once `"@nestjs/swagger"` and our applications relevant Swagger installation is
complete. Let's open up our `main.ts` - file and start setting up swagger by
generating a *base* *"documentation"* which will be the "base - object" where
our "OpenAPI - document" is contained.

//{{{  main.ts
[source, typescript]
----
// main.ts
import { NestFactory } from "@nestjs/core";
import { ValidationPipe } from "@nestjs/common";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";

import { AppModule } from "./app.module";

async function bootstrap() {
    const app = await NestFactory.create(AppModule);

    app.useGlobalPipes(
        new ValidationPipe({
        }),
    );
    const options = new DocumentBuilder()
        .setTitle("Iluvcoffee")
        .setDescription("Coffee Application")
        .setVersion("0.1")
        .build();

    const document = SwaggerModule.createDocument(app, options);
    SwaggerModule.setup("api", app, document);

    await app.listen(3002);
}
bootstrap();
----
//}}}

`"DocumentBuilder"` from the `@nestjs/swagger` - package, helps us structure
a base document that conforms to the OpenAPI Specification. It provides several
methods that allow us to set such properties as: "title", "description",
"version" etc.

Next. Let's use these options to create the full document with all "HTTP
- Routes" - defined.  Let's start by importing `"SwaggerModule"` from
  `@nestjs/swagger`; and call the `"createDocument()"` - method passing *in* our
  "application instance", and the "Swagger `options` - Object", we just created.

Now that we've created a document we can call the `"SwaggerModule.setup()"`
- method to wire everything together. This method accepts a few parameter
including:

- "Route - path" to mount the Swagger UI to.
- "Application - Instance".
- "Document - Object" we just instantiated above.

With all of this in place we can now run our application to see if everything
worked.

//{{{ $ npm run start:dev
[source, shell]
----
$ npm run start:dev
----
//}}}

Once the application finishes building and it's up and running.

Let's open up our browser and navigate to `"localhost/3002/api"`.

//{{{ image::./images/chapter-7-4.png
[#img-chapter]
[link=./images/chapter-7-4.png]
.Introducing the Swagger Module -4
image::./images/chapter-7-4.png[align="center"]
//}}}

This is the "Route - path" that we put in the fist parameter of our
`"Swagger.setup("api")"`, and look there we have it. We should see the "Swagger
- UI".

As we can see the `SwaggerModule` automatically reflects all of our endpoints
and we can see them all listed here.

//{{{ image::./images/chapter-7-5.png
[#img-chapter]
[link=./images/chapter-7-5.png]
.Introducing the Swagger Module -5
image::./images/chapter-7-5.png[align="center"]
//}}}

But it seems like a lot of information about each endpoint is missing. Let's
take a loot at how we can fix that in the next few lesson.

**â¬†xref:_table_of_contents[back to top]**
//}}}

