//{{{ ** ASCIIDOC HEADER
:description:   nestjs official course | chapter-4
:url-repo:      https://github.com/agungTuanany/nestjs_course_official
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Thu Apr  8 03:17:33 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
:prewrap!:
//}}}

[[_chapter_7_generating_openapi_specification]]
= Chapter-7 Generating OpenAPI Specification
:figure-caption!:
:source-highlighter: highlight.js

//{{{== Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h,~"]
|====
| 1.    | xref:_introducing_the_swagger_module[Introducing the Swagger Module]
| 2.    | xref:_enabling_cli_plugin[Enabling CLI Plugin]
| 3.    | xref:_decorating_model_properties[Decorating Model Properties]
| 4.    | xref:_adding_example_response[Adding Example Response]
|====
//}}}

//{{{ 1 == Introducing the Swagger Module
[[_introducing_the_swagger_module]]
== Introducing the Swagger Module

//{{{ image::./images/chapter-7-1.png
[#img-chapter]
[link=./images/chapter-7-1.png]
.Introducing the Swagger Module
image::./images/chapter-7-1.png[align="center"]
//}}}

Documenting how our application works and showing what our API *expects* and
*returns*, is a vital part of most application documentations. This is
especially true, if you are exposing an external Software Developer Kit (or
SDK).

One great tool to automate this entire process is *Swagger*.

In these next lesson. We'll be looking at how we can integrate and automatically
generate "OpenAPI - documentation" for our NestJS applications.

We'll be taking advantage of all the latest tools and Nest "plugin" to help
automate and simplify every aspect of the process. Let's jump right in.

//{{{ image::./images/chapter-7-2.png
[#img-chapter]
[link=./images/chapter-7-2.png]
.Introducing the Swagger Module -2
image::./images/chapter-7-2.png[align="center"]
//}}}

One of the best ways to document our application is to use the "OpenAPI
- Specification".  The "OpenAPI - Specification" is a language agnostic
definition format used to describe a "RESTful APIs".

//{{{ image::./images/chapter-7-3.png
[#img-chapter]
[link=./images/chapter-7-3.png]
.Introducing the Swagger Module -3
image::./images/chapter-7-3.png[align="center"]
//}}}

An "OpenAPI - document" allows us to describe our entire API including:

- Available *operations* or endpoints.
- *Operation parameter*: input and output for each operation.
- *Authentication* methods.
- *Contact information*, license, terms of use, and other information and much
  more.

Nest provides a dedicated Module which allows us to generate such an "OpenAPI
- document" simply by "*leveraging decorators*".

To get this module installed in our application. Let's first make sure we have
the necessary dependencies installed.

We'll be installing `"@nestjs/swagger"`, `"swagger-ui-express"`, since our
application is using the default platform ExpressJS.  Just know that if you've
switched your "Nest - application" to use "Fastify" install `"fastify-swagger"`
instead.

//{{{ $ npm i --save @nestjs/swagger swagger-ui-express
[source, shell]
----
$ npm i --save @nestjs/swagger swagger-ui-express
----
//}}}

We'll continue ahead as we already have these packages installed, but if you're
following along just pause in a second and come back when it's finished.

Once `"@nestjs/swagger"` and our applications relevant Swagger installation is
complete. Let's open up our `main.ts` - file and start setting up swagger by
generating a *base* *"documentation"* which will be the "base - object" where
our "OpenAPI - document" is contained.

//{{{  main.ts
[source, typescript]
----
// main.ts
import { NestFactory } from "@nestjs/core";
import { ValidationPipe } from "@nestjs/common";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";

import { AppModule } from "./app.module";

async function bootstrap() {
    const app = await NestFactory.create(AppModule);

    app.useGlobalPipes(
        new ValidationPipe({
        }),
    );
    const options = new DocumentBuilder()
        .setTitle("Iluvcoffee")
        .setDescription("Coffee Application")
        .setVersion("0.1")
        .build();

    const document = SwaggerModule.createDocument(app, options);
    SwaggerModule.setup("api", app, document);

    await app.listen(3002);
}
bootstrap();
----
//}}}

`"DocumentBuilder"` from the `@nestjs/swagger` - package, helps us structure
a base document that conforms to the OpenAPI Specification. It provides several
methods that allow us to set such properties as: "title", "description",
"version" etc.

Next. Let's use these options to create the full document with all "HTTP
- Routes" - defined.  Let's start by importing `"SwaggerModule"` from
  `@nestjs/swagger`; and call the `"createDocument()"` - method passing *in* our
  "application instance", and the "Swagger `options` - Object", we just created.

Now that we've created a document we can call the `"SwaggerModule.setup()"`
- method to wire everything together. This method accepts a few parameter
including:

- "Route - path" to mount the Swagger UI to.
- "Application - Instance".
- "Document - Object" we just instantiated above.

With all of this in place we can now run our application to see if everything
worked.

//{{{ $ npm run start:dev
[source, shell]
----
$ npm run start:dev
----
//}}}

Once the application finishes building and it's up and running.

Let's open up our browser and navigate to `"localhost/3002/api"`.

//{{{ image::./images/chapter-7-4.png
[#img-chapter]
[link=./images/chapter-7-4.png]
.Introducing the Swagger Module -4
image::./images/chapter-7-4.png[align="center"]
//}}}

This is the "Route - path" that we put in the fist parameter of our
`"Swagger.setup("api")"`, and look there we have it. We should see the "Swagger
- UI".

As we can see the `SwaggerModule` automatically reflects all of our endpoints
and we can see them all listed here.

//{{{ image::./images/chapter-7-5.png
[#img-chapter]
[link=./images/chapter-7-5.png]
.Introducing the Swagger Module -5
image::./images/chapter-7-5.png[align="center"]
//}}}

But it seems like a lot of information about each endpoint is missing. Let's
take a loot at how we can fix that in the next few lesson.

**â¬†xref:_table_of_contents[back to top]**
//}}}

//{{{ 2 == Enabling CLI Plugin
[[_enabling_cli_plugin]]
== Enabling CLI Plugin

//{{{ image::./images/chapter-7-7.png
[#img-chapter]
[link=./images/chapter-7-7.png]
.Enabling CLI Plugin
image::./images/chapter-7-7.png[align="center"]
//}}}

If we look at the "Swagger - UI", and toggle for example the `create()` POST
- endpoint tab.  We'll notice that there's no information on what "Request
- Body" is *expecting* to properly create a new "Coffees - resources".

How do we know what shape of an object is expected by this specific POST action
in order to successfully add a "new - Coffee", if we don't have any information
provided to us in the "Swagger - UI"?

If we look at our application code, we actually have a dedicated "DTO - class"
that represent the "input API" for this endpoint.

//{{{  create-coffee.dto.ts
[source, typescript]
----
// create-coffee.dto.ts
import { IsString } from "class-validator";

export class CreateCoffeeDto {
    @IsString()
    readonly name: string;

    @IsString()
    readonly brand: string;

    @IsString({ each: true })
    readonly flavors: string[];
}
----
//}}}

But unfortunately, this is not enough to automatically generate the "OpenAPI
- schemas" out of the box.

TypeScript's - "*metadata reflection system*" has several *limitations* which
make it impossible to, for instance: "determine what properties a class consist
of, or recognize whether a given property is *optional* or *required*".

However some of these constraints can be addressed at "*compilation*" time. Nest
provides a plugin that enhances the "TypeScript - compilation" to reduce the
amount of boilerplate code we'd be required to create in order to tackle this
problem.

Note that this plugin is "opt-in". If you prefer you can declare all of the
"Swagger - decorators" *manually* OR (recommended) add specific decorators
wherever you need to *override* the base functionality provided by the plugin.

To enable this new "Swagger - CLI" *plugin*, Simply open up the
*"nest-cli.json"* - file, and add the following "compiler - options"
- configuration.

//{{{ nest-cli.json
[source, typescript]
----
// nest-cli.json
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
      "deleteOutDir": true,
      "plugins": ["@nestjs/swagger/plugin"]
  }
}
----
//}}}

You can see we're including the `"@nestjs/swagger"` - plugin in the `"plugin:
[]"` Array here.

Let's save our changes and fire up the terminal.

To make sure that the `"swagger/plugin"` is properly loaded by the compiler.
Let's terminate the process and rerun the `*"build"*` in development mode with:
(`$ npm run star:dev`).

Once the application is ready, let's head back to the browser and refresh the
"Swagger - UI" page.

//{{{ image::./images/chapter-7-8.png
[#img-chapter]
[link=./images/chapter-7-8.png]
.Enabling CLI Plugin -2
image::./images/chapter-7-8.png[align="center"]
//}}}

Now we can see that the UI actually reflects the "CreateCoffeeDto" with all of
its properties!.

The `@nestjs/swagger` - plugin was able to do all of the heavy lifting for us.
Determining all of the properties here at "*compilation* - time". We didn't have
to lift a finger!.

Next let's toggle the PATCH - endpoint and see if it properly reflects the
"UpdateCoffeeDto".

//{{{ image::./images/chapter-7-9.png
[#img-chapter]
[link=./images/chapter-7-9.png]
.Enabling CLI Plugin -2
image::./images/chapter-7-9.png[align="center"]
//}}}

It looks like Swagger was *not* able to reflect this "DTO - property" and for
some reason as we can see, there are *no* properties specified here in the
Schema.

To fix this, let's head over to the "UpdateCoffeeDto" - file, and make sure
we're importing `"PartialType"` from the `"@nestjs/swagger"` - package instead
of the `"@nestjs/mapped-types"` - package.

//{{{  update-coffee.dto.ts
[source, typescript]
----
// update-coffee.dto.ts
import { PartialType } from "@nestjs/swagger";
//                                   ~~~~~~
import { CreateCoffeeDto } from "./create-coffee.dto";

export class UpdateCoffeeDto extends PartialType(CreateCoffeeDto) {}
----
//}}}

This change helps achieve the same functionality, while instructing Swagger that
these are all in fact "*optional*" - properties.

Let's save the changes, switch back to the browser and refresh the page. Great
there we have it.  Every property is now marked as "optional" as it should be!.

As we can see the `@nestjs/swagger` - plugin not only help us tackle tough
issues.  But even figured out almost everything about our endpoints.

Without the plugin, we would have had to put *decorators* on top of *EVERYTHING*
and specified every piece of information, about each item!.

The "Swagger - plugin" automates all of this, but still gives us the ability to
*override* any little thing we want, if we need to.

**â¬†xref:_table_of_contents[back to top]**
//}}}

//{{{ 3 == Decorating Model Properties
[[_decorating_model_properties]]
== Decorating Model Properties

//{{{ image::./images/chapter-7-10.png
[#img-chapter]
[link=./images/chapter-7-10.png]
.Decorating Model Properties
image::./images/chapter-7-10.png[align="center"]
//}}}

Our "DTO - classes" are now automatically reflected in the "OpenAPI - document".
Every "DTO - class" has its own corresponding data model or schema.

To make these models even more "self - descriptive". Let's define example
"values" and add "descriptions" to some of their attributes.

Let's open the "CreateCoffeeDto" and annotate all the properties with a "new
decorator".  The `@ApiProperty()` - decorator, making sure to import it from
`@nestjs/swagger` - package.

//{{{  create-coffee.dto.ts
[source, typescript]
----
// create-coffee.dto.ts
import { IsString } from "class-validator";

export class CreateCoffeeDto {
    @ApiProperty({ description: "The name of a coffee." })
    @IsString()
    readonly name: string;

    @ApiProperty({ description: "The brand of a coffee." })
    @IsString()
    readonly brand: string;

    @ApiProperty({ example: [] })
    @IsString({ each: true })
    readonly flavors: string[];
}
----
//}}}

This decorator allows us to set various "schema - object" - properties like
"*default*", which sets a "default - value", "description" and many more.

Let's add some "description's" to all the properties here for Swagger to
display.

Obviously our properties here are pretty self-explanatory, but it's important to
know that you can apply additional information that Swagger can utilize on top
of what the `@nestjs/swagger` - plugin already figures out.

Now that we have some example descriptions populated. Let's make sure to save
our changes an navigate to the "Swagger - UI" again.

//{{{ image::./images/chapter-7-11.png
[#img-chapter]
[link=./images/chapter-7-11.png]
.Decorating Model Properties
image::./images/chapter-7-11.png[align="center"]
//}}}

If we "refresh" the page and click that POST - "coffees tab" again, we can see
all those descriptions and examples we added are now populated on the screen.

**â¬†xref:_table_of_contents[back to top]**
//}}}

//{{{ 4 == Adding Example Response
[[_adding_example_response]]
== Adding Example Response

The "OpenAPI - Specification" allows us to specific Response's for all of our
operations.  A Response is defined by its 'HTTP status code" and the data
returned in the "Response - Body".

The "CLI - plugin" we enabled in previous lessons can automatically define
a single "successful - response" for each operation, based on the metadata.

It achieves this by inferring the "return types" from our methods. The
`@nestjs/swagger` - plugin is able to extract this Type information and
automatically add the appropriate metadata for us.

But what if we want to define other example responses. Let's say we want to let
users know what an "API returns", in the case of an Error.

Let's introduce a new Nest "Swagger - decorator" to help us tackle this. The
`*"@ApiResponse()"*` - decorator. The `"@ApiResponse()"` - decorator allows us
to explicitly specify additional responses

If we switch to our text-editor. Let's add the `@ApiResponse` - decorator on top
of our `findAll()` - method to add additonal information to show someone can
expect if a `*"403 Error"*` occurs on this endpoint.

//{{{  coffees.controller.ts
[source, typescript]
----
// coffees.controller.ts
...
...
import { ApiResponse } from "@nestjs/swagger";
...
...

@Controller("coffees")
export class CoffeesController {
    constructor(
    ...
    ...
    ) {
        console.log("[!!] CoffeesController created");
    }

    @ApiResponse({ status: 403, description: "Forbidden" })     // <<<
    @Public()
    @Get()
    async findAll(@Protocol("https") protocol: string, @Query() paginationQuery: PaginationQueryDto) {
        console.log(`[!!] Protocol instantiated: "${protocol}"`);
        return this.coffeesService.findAll(paginationQuery);
    }
----
//}}}

For better readability. There are also shorthand decorators available to us for
all the *common* "API - Response status codes".

Let's replace our code to use `*"@ApiForbiddenResponse()"*` - decorators here
which lets us remove the status `"403"` - value as well, as it's already implied.

//{{{  coffees.controller.ts
[source, typescript]
----
// coffees.controller.ts
...
...
import { ApiForbiddenResponse } from "@nestjs/swagger";
...
...

@Controller("coffees")
export class CoffeesController {
    constructor(
    ...
    ...
    ) {
        console.log("[!!] CoffeesController created");
    }

    @ApiForbiddenResponse({ description: "Forbidden" })     // <<<
    @Public()
    @Get()
    async findAll(@Protocol("https") protocol: string, @Query() paginationQuery: PaginationQueryDto) {
        console.log(`[!!] Protocol instantiated: "${protocol}"`);
        return this.coffeesService.findAll(paginationQuery);
    }
----
//}}}

Let's save our changes, head back to our browser and refresh the page.

Let's toggle that GET `/coffees` tab and under the "Response's" - section, we
could see that we not only have the *success* `"200 - Response"` we already saw.
But we can see our new `"403 - Forbidden"` section and description!.

So what w covered in this lesson may not have been very useful in our exact
use-case *here*.  But it's most important that you can see we have *full
control* over Swagger, and how documenting different "API - Response" can be
beneficial in many circumstances.

**â¬†xref:_table_of_contents[back to top]**
//}}}

